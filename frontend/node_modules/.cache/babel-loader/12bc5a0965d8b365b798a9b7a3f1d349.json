{"ast":null,"code":"var _jsxFileName = \"F:\\\\swathi\\\\RESUME_PROJECTS\\\\GraphQL-Node-React-eventapp\\\\frontend\\\\src\\\\pages\\\\Events.js\";\nimport React, { Component } from 'react';\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport EventList from '../components/Events/EventList/EventList';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Events.css';\n\nclass EventsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      events: [],\n      isLoading: false,\n      selectedEvent: null\n    };\n\n    this.startCreateEventHandler = () => {\n      this.setState({\n        creating: true\n      });\n    };\n\n    this.modalConfirmHandler = () => {\n      this.setState({\n        creating: false\n      });\n      const title = this.titleElRef.current.value;\n      const price = +this.priceElRef.current.value;\n      const date = this.dateElRef.current.value;\n      const description = this.descriptionElRef.current.value;\n\n      if (title.trim().length === 0 || price <= 0 || date.trim().length === 0 || description.trim().length === 0) {\n        return;\n      }\n\n      const event = {\n        title,\n        price,\n        date,\n        description\n      };\n      console.log(event);\n      const requestBody = {\n        query: `\n          mutation {\n            createEvent(eventInput: {title: \"${title}\", description: \"${description}\", price: ${price}, date: \"${date}\"}) {\n              _id\n              title\n              description\n              date\n              price\n            }\n          }\n        `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        this.setState(prevState => {\n          const updatedEvents = [...prevState.events];\n          updatedEvents.push({\n            _id: resData.data.createEvent._id,\n            title: resData.data.createEvent.title,\n            description: resData.data.createEvent.description,\n            date: resData.data.createEvent.date,\n            price: resData.data.createEvent.price,\n            creator: {\n              _id: this.context.userId\n            }\n          });\n          return {\n            events: updatedEvents\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        selectedEvent: null\n      });\n    };\n\n    this.showDetailHandler = eventId => {\n      this.setState(prevState => {\n        const selectedEvent = prevState.events.find(e => e._id === eventId);\n        return {\n          selectedEvent: selectedEvent\n        };\n      });\n    };\n\n    this.bookEventHandler = () => {};\n\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  fetchEvents() {\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n          query {\n            events {\n              _id\n              title\n              description\n              date\n              price\n              creator {\n                _id\n                email\n              }\n            }\n          }\n        `\n    };\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const events = resData.data.events;\n      this.setState({\n        events: events,\n        isLoading: false\n      });\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, (this.state.creating || this.state.selectedEvent) && /*#__PURE__*/React.createElement(Backdrop, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 71\n      }\n    }), this.state.creating && /*#__PURE__*/React.createElement(Modal, {\n      title: \"Add Event\",\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 33\n      }\n    }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      ref: this.titleElRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 33\n      }\n    }, \"Price\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"price\",\n      ref: this.priceElRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 33\n      }\n    }, \"Date\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"datetime-local\",\n      id: \"date\",\n      ref: this.dateElRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 33\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(\"textarea\", {\n      id: \"description\",\n      rows: \"4\",\n      ref: this.descriptionElRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 33\n      }\n    })))), this.state.selectedEvent && /*#__PURE__*/React.createElement(Modal, {\n      title: this.state.selectedEvent.title,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.bookEventHandler,\n      confirmText: \"Book\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 25\n      }\n    }, this.state.selectedEvent.title), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 25\n      }\n    }, \"$\", this.state.selectedEvent.price, \" -\", ' ', new Date(this.state.selectedEvent.date).toLocaleDateString()), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }\n    }, this.state.selectedEvent.description)), this.context.token && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"events-control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 25\n      }\n    }, \"Share your own Events!\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreateEventHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 25\n      }\n    }, \"Create Event\")), this.state.isLoading ? /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }\n    }) : /*#__PURE__*/React.createElement(EventList, {\n      events: this.state.events,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 25\n      }\n    }));\n  }\n\n}\n\nEventsPage.contextType = AuthContext;\nexport default EventsPage;","map":{"version":3,"sources":["F:/swathi/RESUME_PROJECTS/GraphQL-Node-React-eventapp/frontend/src/pages/Events.js"],"names":["React","Component","Modal","Backdrop","EventList","Spinner","AuthContext","EventsPage","constructor","props","state","creating","events","isLoading","selectedEvent","startCreateEventHandler","setState","modalConfirmHandler","title","titleElRef","current","value","price","priceElRef","date","dateElRef","description","descriptionElRef","trim","length","event","console","log","requestBody","query","token","context","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedEvents","push","_id","data","createEvent","creator","userId","catch","err","modalCancelHandler","showDetailHandler","eventId","find","e","bookEventHandler","createRef","componentDidMount","fetchEvents","render","Date","toLocaleDateString","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport Modal from '../components/Modal/Modal';\r\nimport Backdrop from '../components/Backdrop/Backdrop';\r\nimport EventList from '../components/Events/EventList/EventList';\r\nimport Spinner from '../components/Spinner/Spinner';\r\nimport AuthContext from '../context/auth-context';\r\nimport './Events.css';\r\n\r\nclass EventsPage extends Component {\r\n    state = {\r\n        creating: false,\r\n        events: [],\r\n        isLoading: false,\r\n        selectedEvent: null\r\n    };\r\n\r\n    static contextType = AuthContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.titleElRef = React.createRef();\r\n        this.priceElRef = React.createRef();\r\n        this.dateElRef = React.createRef();\r\n        this.descriptionElRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchEvents();\r\n    }\r\n\r\n    startCreateEventHandler = () => {\r\n        this.setState({ creating: true });\r\n    };\r\n\r\n    modalConfirmHandler = () => {\r\n        this.setState({ creating: false });\r\n        const title = this.titleElRef.current.value;\r\n        const price = +this.priceElRef.current.value;\r\n        const date = this.dateElRef.current.value;\r\n        const description = this.descriptionElRef.current.value;\r\n\r\n        if (\r\n            title.trim().length === 0 ||\r\n            price <= 0 ||\r\n            date.trim().length === 0 ||\r\n            description.trim().length === 0\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        const event = { title, price, date, description };\r\n        console.log(event);\r\n\r\n        const requestBody = {\r\n            query: `\r\n          mutation {\r\n            createEvent(eventInput: {title: \"${title}\", description: \"${description}\", price: ${price}, date: \"${date}\"}) {\r\n              _id\r\n              title\r\n              description\r\n              date\r\n              price\r\n            }\r\n          }\r\n        `\r\n        };\r\n\r\n        const token = this.context.token;\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) {\r\n                    throw new Error('Failed!');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.setState(prevState => {\r\n                    const updatedEvents = [...prevState.events];\r\n                    updatedEvents.push({\r\n                        _id: resData.data.createEvent._id,\r\n                        title: resData.data.createEvent.title,\r\n                        description: resData.data.createEvent.description,\r\n                        date: resData.data.createEvent.date,\r\n                        price: resData.data.createEvent.price,\r\n                        creator: {\r\n                            _id: this.context.userId\r\n                        }\r\n                    });\r\n                    return { events: updatedEvents };\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    modalCancelHandler = () => {\r\n        this.setState({ creating: false, selectedEvent: null });\r\n    };\r\n\r\n    fetchEvents() {\r\n        this.setState({ isLoading: true });\r\n        const requestBody = {\r\n            query: `\r\n          query {\r\n            events {\r\n              _id\r\n              title\r\n              description\r\n              date\r\n              price\r\n              creator {\r\n                _id\r\n                email\r\n              }\r\n            }\r\n          }\r\n        `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) {\r\n                    throw new Error('Failed!');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                const events = resData.data.events;\r\n                this.setState({ events: events, isLoading: false });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.setState({ isLoading: false });\r\n            });\r\n    }\r\n\r\n    showDetailHandler = eventId => {\r\n        this.setState(prevState => {\r\n            const selectedEvent = prevState.events.find(e => e._id === eventId);\r\n            return { selectedEvent: selectedEvent };\r\n        });\r\n    };\r\n\r\n    bookEventHandler = () => { };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {(this.state.creating || this.state.selectedEvent) && <Backdrop />}\r\n                {this.state.creating && (\r\n                    <Modal\r\n                        title=\"Add Event\"\r\n                        canCancel\r\n                        canConfirm\r\n                        onCancel={this.modalCancelHandler}\r\n                        onConfirm={this.modalConfirmHandler}\r\n                        confirmText=\"Confirm\"\r\n                    >\r\n                        <form>\r\n                            <div className=\"form-control\">\r\n                                <label htmlFor=\"title\">Title</label>\r\n                                <input type=\"text\" id=\"title\" ref={this.titleElRef} />\r\n                            </div>\r\n                            <div className=\"form-control\">\r\n                                <label htmlFor=\"price\">Price</label>\r\n                                <input type=\"number\" id=\"price\" ref={this.priceElRef} />\r\n                            </div>\r\n                            <div className=\"form-control\">\r\n                                <label htmlFor=\"date\">Date</label>\r\n                                <input type=\"datetime-local\" id=\"date\" ref={this.dateElRef} />\r\n                            </div>\r\n                            <div className=\"form-control\">\r\n                                <label htmlFor=\"description\">Description</label>\r\n                                <textarea\r\n                                    id=\"description\"\r\n                                    rows=\"4\"\r\n                                    ref={this.descriptionElRef}\r\n                                />\r\n                            </div>\r\n                        </form>\r\n                    </Modal>\r\n                )}\r\n                {this.state.selectedEvent && (\r\n                    <Modal\r\n                        title={this.state.selectedEvent.title}\r\n                        canCancel\r\n                        canConfirm\r\n                        onCancel={this.modalCancelHandler}\r\n                        onConfirm={this.bookEventHandler}\r\n                        confirmText=\"Book\"\r\n                    >\r\n                        <h1>{this.state.selectedEvent.title}</h1>\r\n                        <h2>\r\n                            ${this.state.selectedEvent.price} -{' '}\r\n                            {new Date(this.state.selectedEvent.date).toLocaleDateString()}\r\n                        </h2>\r\n                        <p>{this.state.selectedEvent.description}</p>\r\n                    </Modal>\r\n                )}\r\n                {this.context.token && (\r\n                    <div className=\"events-control\">\r\n                        <p>Share your own Events!</p>\r\n                        <button className=\"btn\" onClick={this.startCreateEventHandler}>\r\n                            Create Event\r\n            </button>\r\n                    </div>\r\n                )}\r\n                {this.state.isLoading ? (\r\n                    <Spinner />\r\n                ) : (\r\n                        <EventList\r\n                            events={this.state.events}\r\n                            authUserId={this.context.userId}\r\n                            onViewDetail={this.showDetailHandler}\r\n                        />\r\n                    )}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventsPage;"]},"metadata":{},"sourceType":"module"}