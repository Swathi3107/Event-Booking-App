{"ast":null,"code":"var _jsxFileName = \"F:\\\\swathi\\\\RESUME_PROJECTS\\\\GraphQL-Node-React-eventapp\\\\frontend\\\\src\\\\pages\\\\Bookings.js\";\nimport React, { Component } from 'react';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport BookingList from '../components/Bookings/BookingList/BookingList';\n\nclass BookingsPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      bookings: []\n    };\n\n    this.fetchBookings = () => {\n      this.setState({\n        isLoading: true\n      });\n      const requestBody = {\n        query: `\n          query {\n            bookings {\n              _id\n             createdAt\n             event {\n               _id\n               title\n               date\n             }\n            }\n          }\n        `\n      };\n      fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const bookings = resData.data.bookings;\n        this.setState({\n          bookings: bookings,\n          isLoading: false\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    this.deleteBookingHandler = bookingId => {\n      this.setState({\n        isLoading: true\n      });\n      const requestBody = {\n        query: `\n          mutation {\n            cancelBooking(bookingId: \"${bookingId}\") {\n            _id\n             title\n            }\n          }\n        `\n      };\n      fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        this.setState(prevState => {\n          const updatedBookings = prevState.bookings.filter(booking => {\n            return booking._id !== bookingId;\n          });\n          return {\n            bookings: updatedBookings,\n            isLoading: false\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchBookings();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, this.state.isLoading ? /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }) : /*#__PURE__*/React.createElement(BookingList, {\n      bookings: this.state.bookings,\n      onDelete: this.deleteBookingHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }\n    }));\n  }\n\n}\n\nBookingsPage.contextType = AuthContext;\nexport default BookingsPage;","map":{"version":3,"sources":["F:/swathi/RESUME_PROJECTS/GraphQL-Node-React-eventapp/frontend/src/pages/Bookings.js"],"names":["React","Component","Spinner","AuthContext","BookingList","BookingsPage","state","isLoading","bookings","fetchBookings","setState","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","context","token","then","res","status","Error","json","resData","data","catch","err","console","log","deleteBookingHandler","bookingId","prevState","updatedBookings","filter","booking","_id","componentDidMount","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport Spinner from '../components/Spinner/Spinner';\r\nimport AuthContext from '../context/auth-context';\r\nimport BookingList from '../components/Bookings/BookingList/BookingList';\r\n\r\nclass BookingsPage extends Component {\r\n    state = {\r\n        isLoading: false,\r\n        bookings: []\r\n    };\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        this.fetchBookings();\r\n    }\r\n\r\n    fetchBookings = () => {\r\n        this.setState({ isLoading: true });\r\n        const requestBody = {\r\n            query: `\r\n          query {\r\n            bookings {\r\n              _id\r\n             createdAt\r\n             event {\r\n               _id\r\n               title\r\n               date\r\n             }\r\n            }\r\n          }\r\n        `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + this.context.token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) {\r\n                    throw new Error('Failed!');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                const bookings = resData.data.bookings;\r\n                this.setState({ bookings: bookings, isLoading: false });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.setState({ isLoading: false });\r\n            });\r\n    };\r\n\r\n    deleteBookingHandler = bookingId => {\r\n        this.setState({ isLoading: true });\r\n        const requestBody = {\r\n            query: `\r\n          mutation {\r\n            cancelBooking(bookingId: \"${bookingId}\") {\r\n            _id\r\n             title\r\n            }\r\n          }\r\n        `\r\n        };\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + this.context.token\r\n            }\r\n        })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 201) {\r\n                    throw new Error('Failed!');\r\n                }\r\n                return res.json();\r\n            })\r\n            .then(resData => {\r\n                this.setState(prevState => {\r\n                    const updatedBookings = prevState.bookings.filter(booking => {\r\n                        return booking._id !== bookingId;\r\n                    });\r\n                    return { bookings: updatedBookings, isLoading: false };\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.setState({ isLoading: false });\r\n            });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.isLoading ? (\r\n                    <Spinner />\r\n                ) : (\r\n                        <BookingList\r\n                            bookings={this.state.bookings}\r\n                            onDelete={this.deleteBookingHandler}\r\n                        />\r\n                    )}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BookingsPage;"]},"metadata":{},"sourceType":"module"}